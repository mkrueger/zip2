name: CI

on:
  pull_request:
    branches:
      - 'master'
  push:
    branches-ignore:
      - 'gh-readonly-queue/**'
  workflow_dispatch:
  merge_group:
    types: [checks_requested]

env:
  RUSTFLAGS: -Dwarnings

jobs:
  build_and_test:
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        rustalias: [stable, nightly, msrv]
        feature_flag: ["--all-features", "--no-default-features", ""]
        include:
        - rustalias: stable
          rust: stable
        - rustalias: msrv
          rust: '1.73'
        - rustalias: nightly
          rust: nightly
    name: 'Build and test ${{ matrix.feature_flag }}: ${{ matrix.os }}, ${{ matrix.rustalias }}'
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@master

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        override: true

    - name: Check
      uses: actions-rs/cargo@v1
      with:
        command: check
        args: --all ${{ matrix.feature_flag }} --bins --examples

    - name: Tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --all ${{ matrix.feature_flag }}

  cargo_fmt:
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: rustfmt
      - name: fmt
        run: cargo fmt --all -- --check

  style_and_docs:
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    strategy:
      matrix:
        feature_flag: ["--all-features", "--no-default-features", ""]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: nightly
        override: true
        components: clippy
    - name: clippy
      uses: actions-rs/cargo@v1
      with:
        command: clippy
        args: --all-targets ${{ matrix.feature_flag }} -- -D warnings
    - name: docs
      uses: actions-rs/cargo@v1
      with:
        command: doc
        args: --no-deps ${{ matrix.feature_flag }}

  fuzz_read:
    runs-on: ubuntu-latest
    needs:
      - build_and_test
      - cargo_fmt
      - style_and_docs
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-fuzz
      - name: compile fuzz
        uses: actions-rs/cargo@v1
        with:
          command: fuzz
          args: build --all-features fuzz_read
      - name: run fuzz
        timeout-minutes: 350
        uses: actions-rs/cargo@v1
        with:
          command: fuzz
          args: run --all-features fuzz_read -- fuzz/corpus/fuzz_read -timeout=10s -rss_limit_mb=8192 -fork=2 -runs=25000000 -max_len=70000 -max_total_time=20700 -dict=fuzz/fuzz.dict
      - name: Upload any failure inputs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: fuzz_read_bad_inputs
          path: fuzz/artifacts/fuzz_read/crash-*
          if-no-files-found: ignore
      - name: Minimize seed corpus
        if: always()
        run: ./recursive-fuzz-cmin.sh read 70000
        shell: bash
      - name: Upload updated seed corpus
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: fuzz_read_corpus
          path: fuzz/corpus/fuzz_read/*

  fuzz_read_with_no_features:
    runs-on: ubuntu-latest
    needs:
      - build_and_test
      - cargo_fmt
      - style_and_docs
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-fuzz
      - name: compile fuzz
        uses: actions-rs/cargo@v1
        with:
          command: fuzz
          args: build --no-default-features fuzz_read
      - name: run fuzz
        timeout-minutes: 350
        uses: actions-rs/cargo@v1
        with:
          command: fuzz
          args: run --no-default-features fuzz_read fuzz/corpus/fuzz_read -- -rss_limit_mb=8192 -timeout=10s -fork=2 -runs=40000000 -max_total_time=20700 -max_len=70000 -dict=fuzz/fuzz.dict
      - name: Upload any failure inputs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: fuzz_read_no_features_bad_inputs
          path: fuzz/artifacts/fuzz_read/crash-*
          if-no-files-found: ignore

  fuzz_write:
    runs-on: ubuntu-latest
    needs:
      - build_and_test
      - cargo_fmt
      - style_and_docs
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-fuzz
      - name: compile fuzz
        uses: actions-rs/cargo@v1
        with:
          command: fuzz
          args: build --all-features fuzz_write
      - name: run fuzz
        timeout-minutes: 350
        uses: actions-rs/cargo@v1
        with:
          command: fuzz
          args: run --all-features fuzz_write fuzz/corpus/fuzz_write -- -rss_limit_mb=8192 -timeout=2s -fork=2 -runs=5000000 -max_len=500 -max_total_time=20700 -dict=fuzz/fuzz.dict
      - name: Upload any failure inputs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: fuzz_write_bad_inputs
          path: |
            fuzz/artifacts/fuzz_write/crash-*
            fuzz/artifacts/fuzz_write/leak-*
            fuzz/artifacts/fuzz_write/timeout-*
          if-no-files-found: ignore
      - name: Minimize seed corpus
        if: always()
        run: ./recursive-fuzz-cmin.sh write 500
        shell: bash
      - name: Upload updated seed corpus
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: fuzz_write_corpus
          path: fuzz/corpus/fuzz_write/*

  fuzz_write_with_no_features:
    runs-on: ubuntu-latest
    needs:
      - build_and_test
      - cargo_fmt
      - style_and_docs
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-fuzz
      - name: compile fuzz
        uses: actions-rs/cargo@v1
        with:
          command: fuzz
          args: build --no-default-features fuzz_write
      - name: run fuzz
        timeout-minutes: 350
        uses: actions-rs/cargo@v1
        with:
          command: fuzz
          args: run --no-default-features fuzz_write fuzz/corpus/fuzz_write -- -rss_limit_mb=8192 -timeout=10s -fork=2 -runs=50000000 -max_len=500 -max_total_time=20700 -len_control=200 -dict=fuzz/fuzz.dict
      - name: Upload any failure inputs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: fuzz_write_no_features_bad_inputs
          path: fuzz/artifacts/fuzz_write/crash-*
          if-no-files-found: ignore
